module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBilling {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregatePhone {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregatePurchase {
  count: Int!
}

type AggregateShipping {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Billing {
  id: ID!
  street: String!
  city: String!
  state: String!
  zipcode: Int!
  order_id: Order!
}

type BillingConnection {
  pageInfo: PageInfo!
  edges: [BillingEdge]!
  aggregate: AggregateBilling!
}

input BillingCreateInput {
  id: ID
  street: String!
  city: String!
  state: String!
  zipcode: Int!
  order_id: OrderCreateOneWithoutBilling_addressInput!
}

input BillingCreateManyWithoutOrder_idInput {
  create: [BillingCreateWithoutOrder_idInput!]
  connect: [BillingWhereUniqueInput!]
}

input BillingCreateWithoutOrder_idInput {
  id: ID
  street: String!
  city: String!
  state: String!
  zipcode: Int!
}

type BillingEdge {
  node: Billing!
  cursor: String!
}

enum BillingOrderByInput {
  id_ASC
  id_DESC
  street_ASC
  street_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zipcode_ASC
  zipcode_DESC
}

type BillingPreviousValues {
  id: ID!
  street: String!
  city: String!
  state: String!
  zipcode: Int!
}

input BillingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zipcode: Int
  zipcode_not: Int
  zipcode_in: [Int!]
  zipcode_not_in: [Int!]
  zipcode_lt: Int
  zipcode_lte: Int
  zipcode_gt: Int
  zipcode_gte: Int
  AND: [BillingScalarWhereInput!]
  OR: [BillingScalarWhereInput!]
  NOT: [BillingScalarWhereInput!]
}

type BillingSubscriptionPayload {
  mutation: MutationType!
  node: Billing
  updatedFields: [String!]
  previousValues: BillingPreviousValues
}

input BillingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BillingWhereInput
  AND: [BillingSubscriptionWhereInput!]
  OR: [BillingSubscriptionWhereInput!]
  NOT: [BillingSubscriptionWhereInput!]
}

input BillingUpdateInput {
  street: String
  city: String
  state: String
  zipcode: Int
  order_id: OrderUpdateOneRequiredWithoutBilling_addressInput
}

input BillingUpdateManyDataInput {
  street: String
  city: String
  state: String
  zipcode: Int
}

input BillingUpdateManyMutationInput {
  street: String
  city: String
  state: String
  zipcode: Int
}

input BillingUpdateManyWithoutOrder_idInput {
  create: [BillingCreateWithoutOrder_idInput!]
  delete: [BillingWhereUniqueInput!]
  connect: [BillingWhereUniqueInput!]
  set: [BillingWhereUniqueInput!]
  disconnect: [BillingWhereUniqueInput!]
  update: [BillingUpdateWithWhereUniqueWithoutOrder_idInput!]
  upsert: [BillingUpsertWithWhereUniqueWithoutOrder_idInput!]
  deleteMany: [BillingScalarWhereInput!]
  updateMany: [BillingUpdateManyWithWhereNestedInput!]
}

input BillingUpdateManyWithWhereNestedInput {
  where: BillingScalarWhereInput!
  data: BillingUpdateManyDataInput!
}

input BillingUpdateWithoutOrder_idDataInput {
  street: String
  city: String
  state: String
  zipcode: Int
}

input BillingUpdateWithWhereUniqueWithoutOrder_idInput {
  where: BillingWhereUniqueInput!
  data: BillingUpdateWithoutOrder_idDataInput!
}

input BillingUpsertWithWhereUniqueWithoutOrder_idInput {
  where: BillingWhereUniqueInput!
  update: BillingUpdateWithoutOrder_idDataInput!
  create: BillingCreateWithoutOrder_idInput!
}

input BillingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zipcode: Int
  zipcode_not: Int
  zipcode_in: [Int!]
  zipcode_not_in: [Int!]
  zipcode_lt: Int
  zipcode_lte: Int
  zipcode_gt: Int
  zipcode_gte: Int
  order_id: OrderWhereInput
  AND: [BillingWhereInput!]
  OR: [BillingWhereInput!]
  NOT: [BillingWhereInput!]
}

input BillingWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBilling(data: BillingCreateInput!): Billing!
  updateBilling(data: BillingUpdateInput!, where: BillingWhereUniqueInput!): Billing
  updateManyBillings(data: BillingUpdateManyMutationInput!, where: BillingWhereInput): BatchPayload!
  upsertBilling(where: BillingWhereUniqueInput!, create: BillingCreateInput!, update: BillingUpdateInput!): Billing!
  deleteBilling(where: BillingWhereUniqueInput!): Billing
  deleteManyBillings(where: BillingWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createPhone(data: PhoneCreateInput!): Phone!
  updatePhone(data: PhoneUpdateInput!, where: PhoneWhereUniqueInput!): Phone
  updateManyPhones(data: PhoneUpdateManyMutationInput!, where: PhoneWhereInput): BatchPayload!
  upsertPhone(where: PhoneWhereUniqueInput!, create: PhoneCreateInput!, update: PhoneUpdateInput!): Phone!
  deletePhone(where: PhoneWhereUniqueInput!): Phone
  deleteManyPhones(where: PhoneWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createPurchase(data: PurchaseCreateInput!): Purchase!
  updatePurchase(data: PurchaseUpdateInput!, where: PurchaseWhereUniqueInput!): Purchase
  updateManyPurchases(data: PurchaseUpdateManyMutationInput!, where: PurchaseWhereInput): BatchPayload!
  upsertPurchase(where: PurchaseWhereUniqueInput!, create: PurchaseCreateInput!, update: PurchaseUpdateInput!): Purchase!
  deletePurchase(where: PurchaseWhereUniqueInput!): Purchase
  deleteManyPurchases(where: PurchaseWhereInput): BatchPayload!
  createShipping(data: ShippingCreateInput!): Shipping!
  updateShipping(data: ShippingUpdateInput!, where: ShippingWhereUniqueInput!): Shipping
  updateManyShippings(data: ShippingUpdateManyMutationInput!, where: ShippingWhereInput): BatchPayload!
  upsertShipping(where: ShippingWhereUniqueInput!, create: ShippingCreateInput!, update: ShippingUpdateInput!): Shipping!
  deleteShipping(where: ShippingWhereUniqueInput!): Shipping
  deleteManyShippings(where: ShippingWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Order {
  id: ID!
  customer_name: String!
  customer_email: String!
  customer_phone(where: PhoneWhereInput, orderBy: PhoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Phone!]
  shipping_address(where: ShippingWhereInput, orderBy: ShippingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shipping!]
  billing_address(where: BillingWhereInput, orderBy: BillingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Billing!]
  purchase_products(where: PurchaseWhereInput, orderBy: PurchaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Purchase!]
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  customer_name: String!
  customer_email: String!
  customer_phone: PhoneCreateManyWithoutOrder_idInput
  shipping_address: ShippingCreateManyWithoutOrder_idInput
  billing_address: BillingCreateManyWithoutOrder_idInput
  purchase_products: PurchaseCreateManyWithoutOrder_idInput
}

input OrderCreateOneWithoutBilling_addressInput {
  create: OrderCreateWithoutBilling_addressInput
  connect: OrderWhereUniqueInput
}

input OrderCreateOneWithoutCustomer_phoneInput {
  create: OrderCreateWithoutCustomer_phoneInput
  connect: OrderWhereUniqueInput
}

input OrderCreateOneWithoutPurchase_productsInput {
  create: OrderCreateWithoutPurchase_productsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateOneWithoutShipping_addressInput {
  create: OrderCreateWithoutShipping_addressInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutBilling_addressInput {
  id: ID
  customer_name: String!
  customer_email: String!
  customer_phone: PhoneCreateManyWithoutOrder_idInput
  shipping_address: ShippingCreateManyWithoutOrder_idInput
  purchase_products: PurchaseCreateManyWithoutOrder_idInput
}

input OrderCreateWithoutCustomer_phoneInput {
  id: ID
  customer_name: String!
  customer_email: String!
  shipping_address: ShippingCreateManyWithoutOrder_idInput
  billing_address: BillingCreateManyWithoutOrder_idInput
  purchase_products: PurchaseCreateManyWithoutOrder_idInput
}

input OrderCreateWithoutPurchase_productsInput {
  id: ID
  customer_name: String!
  customer_email: String!
  customer_phone: PhoneCreateManyWithoutOrder_idInput
  shipping_address: ShippingCreateManyWithoutOrder_idInput
  billing_address: BillingCreateManyWithoutOrder_idInput
}

input OrderCreateWithoutShipping_addressInput {
  id: ID
  customer_name: String!
  customer_email: String!
  customer_phone: PhoneCreateManyWithoutOrder_idInput
  billing_address: BillingCreateManyWithoutOrder_idInput
  purchase_products: PurchaseCreateManyWithoutOrder_idInput
}

type OrderEdge {
  node: Order!
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  customer_name_ASC
  customer_name_DESC
  customer_email_ASC
  customer_email_DESC
}

type OrderPreviousValues {
  id: ID!
  customer_name: String!
  customer_email: String!
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  customer_name: String
  customer_email: String
  customer_phone: PhoneUpdateManyWithoutOrder_idInput
  shipping_address: ShippingUpdateManyWithoutOrder_idInput
  billing_address: BillingUpdateManyWithoutOrder_idInput
  purchase_products: PurchaseUpdateManyWithoutOrder_idInput
}

input OrderUpdateManyMutationInput {
  customer_name: String
  customer_email: String
}

input OrderUpdateOneRequiredWithoutBilling_addressInput {
  create: OrderCreateWithoutBilling_addressInput
  update: OrderUpdateWithoutBilling_addressDataInput
  upsert: OrderUpsertWithoutBilling_addressInput
  connect: OrderWhereUniqueInput
}

input OrderUpdateOneRequiredWithoutCustomer_phoneInput {
  create: OrderCreateWithoutCustomer_phoneInput
  update: OrderUpdateWithoutCustomer_phoneDataInput
  upsert: OrderUpsertWithoutCustomer_phoneInput
  connect: OrderWhereUniqueInput
}

input OrderUpdateOneRequiredWithoutPurchase_productsInput {
  create: OrderCreateWithoutPurchase_productsInput
  update: OrderUpdateWithoutPurchase_productsDataInput
  upsert: OrderUpsertWithoutPurchase_productsInput
  connect: OrderWhereUniqueInput
}

input OrderUpdateOneRequiredWithoutShipping_addressInput {
  create: OrderCreateWithoutShipping_addressInput
  update: OrderUpdateWithoutShipping_addressDataInput
  upsert: OrderUpsertWithoutShipping_addressInput
  connect: OrderWhereUniqueInput
}

input OrderUpdateWithoutBilling_addressDataInput {
  customer_name: String
  customer_email: String
  customer_phone: PhoneUpdateManyWithoutOrder_idInput
  shipping_address: ShippingUpdateManyWithoutOrder_idInput
  purchase_products: PurchaseUpdateManyWithoutOrder_idInput
}

input OrderUpdateWithoutCustomer_phoneDataInput {
  customer_name: String
  customer_email: String
  shipping_address: ShippingUpdateManyWithoutOrder_idInput
  billing_address: BillingUpdateManyWithoutOrder_idInput
  purchase_products: PurchaseUpdateManyWithoutOrder_idInput
}

input OrderUpdateWithoutPurchase_productsDataInput {
  customer_name: String
  customer_email: String
  customer_phone: PhoneUpdateManyWithoutOrder_idInput
  shipping_address: ShippingUpdateManyWithoutOrder_idInput
  billing_address: BillingUpdateManyWithoutOrder_idInput
}

input OrderUpdateWithoutShipping_addressDataInput {
  customer_name: String
  customer_email: String
  customer_phone: PhoneUpdateManyWithoutOrder_idInput
  billing_address: BillingUpdateManyWithoutOrder_idInput
  purchase_products: PurchaseUpdateManyWithoutOrder_idInput
}

input OrderUpsertWithoutBilling_addressInput {
  update: OrderUpdateWithoutBilling_addressDataInput!
  create: OrderCreateWithoutBilling_addressInput!
}

input OrderUpsertWithoutCustomer_phoneInput {
  update: OrderUpdateWithoutCustomer_phoneDataInput!
  create: OrderCreateWithoutCustomer_phoneInput!
}

input OrderUpsertWithoutPurchase_productsInput {
  update: OrderUpdateWithoutPurchase_productsDataInput!
  create: OrderCreateWithoutPurchase_productsInput!
}

input OrderUpsertWithoutShipping_addressInput {
  update: OrderUpdateWithoutShipping_addressDataInput!
  create: OrderCreateWithoutShipping_addressInput!
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  customer_name: String
  customer_name_not: String
  customer_name_in: [String!]
  customer_name_not_in: [String!]
  customer_name_lt: String
  customer_name_lte: String
  customer_name_gt: String
  customer_name_gte: String
  customer_name_contains: String
  customer_name_not_contains: String
  customer_name_starts_with: String
  customer_name_not_starts_with: String
  customer_name_ends_with: String
  customer_name_not_ends_with: String
  customer_email: String
  customer_email_not: String
  customer_email_in: [String!]
  customer_email_not_in: [String!]
  customer_email_lt: String
  customer_email_lte: String
  customer_email_gt: String
  customer_email_gte: String
  customer_email_contains: String
  customer_email_not_contains: String
  customer_email_starts_with: String
  customer_email_not_starts_with: String
  customer_email_ends_with: String
  customer_email_not_ends_with: String
  customer_phone_every: PhoneWhereInput
  customer_phone_some: PhoneWhereInput
  customer_phone_none: PhoneWhereInput
  shipping_address_every: ShippingWhereInput
  shipping_address_some: ShippingWhereInput
  shipping_address_none: ShippingWhereInput
  billing_address_every: BillingWhereInput
  billing_address_some: BillingWhereInput
  billing_address_none: BillingWhereInput
  purchase_products_every: PurchaseWhereInput
  purchase_products_some: PurchaseWhereInput
  purchase_products_none: PurchaseWhereInput
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Phone {
  id: ID!
  number: Int!
  type: String!
  contact: Boolean!
  order_id: Order!
}

type PhoneConnection {
  pageInfo: PageInfo!
  edges: [PhoneEdge]!
  aggregate: AggregatePhone!
}

input PhoneCreateInput {
  id: ID
  number: Int!
  type: String!
  contact: Boolean!
  order_id: OrderCreateOneWithoutCustomer_phoneInput!
}

input PhoneCreateManyWithoutOrder_idInput {
  create: [PhoneCreateWithoutOrder_idInput!]
  connect: [PhoneWhereUniqueInput!]
}

input PhoneCreateWithoutOrder_idInput {
  id: ID
  number: Int!
  type: String!
  contact: Boolean!
}

type PhoneEdge {
  node: Phone!
  cursor: String!
}

enum PhoneOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  type_ASC
  type_DESC
  contact_ASC
  contact_DESC
}

type PhonePreviousValues {
  id: ID!
  number: Int!
  type: String!
  contact: Boolean!
}

input PhoneScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  contact: Boolean
  contact_not: Boolean
  AND: [PhoneScalarWhereInput!]
  OR: [PhoneScalarWhereInput!]
  NOT: [PhoneScalarWhereInput!]
}

type PhoneSubscriptionPayload {
  mutation: MutationType!
  node: Phone
  updatedFields: [String!]
  previousValues: PhonePreviousValues
}

input PhoneSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PhoneWhereInput
  AND: [PhoneSubscriptionWhereInput!]
  OR: [PhoneSubscriptionWhereInput!]
  NOT: [PhoneSubscriptionWhereInput!]
}

input PhoneUpdateInput {
  number: Int
  type: String
  contact: Boolean
  order_id: OrderUpdateOneRequiredWithoutCustomer_phoneInput
}

input PhoneUpdateManyDataInput {
  number: Int
  type: String
  contact: Boolean
}

input PhoneUpdateManyMutationInput {
  number: Int
  type: String
  contact: Boolean
}

input PhoneUpdateManyWithoutOrder_idInput {
  create: [PhoneCreateWithoutOrder_idInput!]
  delete: [PhoneWhereUniqueInput!]
  connect: [PhoneWhereUniqueInput!]
  set: [PhoneWhereUniqueInput!]
  disconnect: [PhoneWhereUniqueInput!]
  update: [PhoneUpdateWithWhereUniqueWithoutOrder_idInput!]
  upsert: [PhoneUpsertWithWhereUniqueWithoutOrder_idInput!]
  deleteMany: [PhoneScalarWhereInput!]
  updateMany: [PhoneUpdateManyWithWhereNestedInput!]
}

input PhoneUpdateManyWithWhereNestedInput {
  where: PhoneScalarWhereInput!
  data: PhoneUpdateManyDataInput!
}

input PhoneUpdateWithoutOrder_idDataInput {
  number: Int
  type: String
  contact: Boolean
}

input PhoneUpdateWithWhereUniqueWithoutOrder_idInput {
  where: PhoneWhereUniqueInput!
  data: PhoneUpdateWithoutOrder_idDataInput!
}

input PhoneUpsertWithWhereUniqueWithoutOrder_idInput {
  where: PhoneWhereUniqueInput!
  update: PhoneUpdateWithoutOrder_idDataInput!
  create: PhoneCreateWithoutOrder_idInput!
}

input PhoneWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  contact: Boolean
  contact_not: Boolean
  order_id: OrderWhereInput
  AND: [PhoneWhereInput!]
  OR: [PhoneWhereInput!]
  NOT: [PhoneWhereInput!]
}

input PhoneWhereUniqueInput {
  id: ID
}

type Product {
  id: ID!
  name: String!
  code: Int!
  cost: Float!
  description: String!
  inventory_on_hand: Int!
  proeduct_type: String!
  category: String!
  pushed_product: Boolean!
  callback: String!
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  name: String!
  code: Int!
  cost: Float!
  description: String!
  inventory_on_hand: Int!
  proeduct_type: String!
  category: String!
  pushed_product: Boolean!
  callback: String!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  cost_ASC
  cost_DESC
  description_ASC
  description_DESC
  inventory_on_hand_ASC
  inventory_on_hand_DESC
  proeduct_type_ASC
  proeduct_type_DESC
  category_ASC
  category_DESC
  pushed_product_ASC
  pushed_product_DESC
  callback_ASC
  callback_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String!
  code: Int!
  cost: Float!
  description: String!
  inventory_on_hand: Int!
  proeduct_type: String!
  category: String!
  pushed_product: Boolean!
  callback: String!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  name: String
  code: Int
  cost: Float
  description: String
  inventory_on_hand: Int
  proeduct_type: String
  category: String
  pushed_product: Boolean
  callback: String
}

input ProductUpdateManyMutationInput {
  name: String
  code: Int
  cost: Float
  description: String
  inventory_on_hand: Int
  proeduct_type: String
  category: String
  pushed_product: Boolean
  callback: String
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  code: Int
  code_not: Int
  code_in: [Int!]
  code_not_in: [Int!]
  code_lt: Int
  code_lte: Int
  code_gt: Int
  code_gte: Int
  cost: Float
  cost_not: Float
  cost_in: [Float!]
  cost_not_in: [Float!]
  cost_lt: Float
  cost_lte: Float
  cost_gt: Float
  cost_gte: Float
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  inventory_on_hand: Int
  inventory_on_hand_not: Int
  inventory_on_hand_in: [Int!]
  inventory_on_hand_not_in: [Int!]
  inventory_on_hand_lt: Int
  inventory_on_hand_lte: Int
  inventory_on_hand_gt: Int
  inventory_on_hand_gte: Int
  proeduct_type: String
  proeduct_type_not: String
  proeduct_type_in: [String!]
  proeduct_type_not_in: [String!]
  proeduct_type_lt: String
  proeduct_type_lte: String
  proeduct_type_gt: String
  proeduct_type_gte: String
  proeduct_type_contains: String
  proeduct_type_not_contains: String
  proeduct_type_starts_with: String
  proeduct_type_not_starts_with: String
  proeduct_type_ends_with: String
  proeduct_type_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  pushed_product: Boolean
  pushed_product_not: Boolean
  callback: String
  callback_not: String
  callback_in: [String!]
  callback_not_in: [String!]
  callback_lt: String
  callback_lte: String
  callback_gt: String
  callback_gte: String
  callback_contains: String
  callback_not_contains: String
  callback_starts_with: String
  callback_not_starts_with: String
  callback_ends_with: String
  callback_not_ends_with: String
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Purchase {
  id: ID!
  code: Int!
  quantity: Int!
  order_id: Order!
}

type PurchaseConnection {
  pageInfo: PageInfo!
  edges: [PurchaseEdge]!
  aggregate: AggregatePurchase!
}

input PurchaseCreateInput {
  id: ID
  code: Int!
  quantity: Int!
  order_id: OrderCreateOneWithoutPurchase_productsInput!
}

input PurchaseCreateManyWithoutOrder_idInput {
  create: [PurchaseCreateWithoutOrder_idInput!]
  connect: [PurchaseWhereUniqueInput!]
}

input PurchaseCreateWithoutOrder_idInput {
  id: ID
  code: Int!
  quantity: Int!
}

type PurchaseEdge {
  node: Purchase!
  cursor: String!
}

enum PurchaseOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  quantity_ASC
  quantity_DESC
}

type PurchasePreviousValues {
  id: ID!
  code: Int!
  quantity: Int!
}

input PurchaseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  code: Int
  code_not: Int
  code_in: [Int!]
  code_not_in: [Int!]
  code_lt: Int
  code_lte: Int
  code_gt: Int
  code_gte: Int
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  AND: [PurchaseScalarWhereInput!]
  OR: [PurchaseScalarWhereInput!]
  NOT: [PurchaseScalarWhereInput!]
}

type PurchaseSubscriptionPayload {
  mutation: MutationType!
  node: Purchase
  updatedFields: [String!]
  previousValues: PurchasePreviousValues
}

input PurchaseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PurchaseWhereInput
  AND: [PurchaseSubscriptionWhereInput!]
  OR: [PurchaseSubscriptionWhereInput!]
  NOT: [PurchaseSubscriptionWhereInput!]
}

input PurchaseUpdateInput {
  code: Int
  quantity: Int
  order_id: OrderUpdateOneRequiredWithoutPurchase_productsInput
}

input PurchaseUpdateManyDataInput {
  code: Int
  quantity: Int
}

input PurchaseUpdateManyMutationInput {
  code: Int
  quantity: Int
}

input PurchaseUpdateManyWithoutOrder_idInput {
  create: [PurchaseCreateWithoutOrder_idInput!]
  delete: [PurchaseWhereUniqueInput!]
  connect: [PurchaseWhereUniqueInput!]
  set: [PurchaseWhereUniqueInput!]
  disconnect: [PurchaseWhereUniqueInput!]
  update: [PurchaseUpdateWithWhereUniqueWithoutOrder_idInput!]
  upsert: [PurchaseUpsertWithWhereUniqueWithoutOrder_idInput!]
  deleteMany: [PurchaseScalarWhereInput!]
  updateMany: [PurchaseUpdateManyWithWhereNestedInput!]
}

input PurchaseUpdateManyWithWhereNestedInput {
  where: PurchaseScalarWhereInput!
  data: PurchaseUpdateManyDataInput!
}

input PurchaseUpdateWithoutOrder_idDataInput {
  code: Int
  quantity: Int
}

input PurchaseUpdateWithWhereUniqueWithoutOrder_idInput {
  where: PurchaseWhereUniqueInput!
  data: PurchaseUpdateWithoutOrder_idDataInput!
}

input PurchaseUpsertWithWhereUniqueWithoutOrder_idInput {
  where: PurchaseWhereUniqueInput!
  update: PurchaseUpdateWithoutOrder_idDataInput!
  create: PurchaseCreateWithoutOrder_idInput!
}

input PurchaseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  code: Int
  code_not: Int
  code_in: [Int!]
  code_not_in: [Int!]
  code_lt: Int
  code_lte: Int
  code_gt: Int
  code_gte: Int
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  order_id: OrderWhereInput
  AND: [PurchaseWhereInput!]
  OR: [PurchaseWhereInput!]
  NOT: [PurchaseWhereInput!]
}

input PurchaseWhereUniqueInput {
  id: ID
}

type Query {
  billing(where: BillingWhereUniqueInput!): Billing
  billings(where: BillingWhereInput, orderBy: BillingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Billing]!
  billingsConnection(where: BillingWhereInput, orderBy: BillingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BillingConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  phone(where: PhoneWhereUniqueInput!): Phone
  phones(where: PhoneWhereInput, orderBy: PhoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Phone]!
  phonesConnection(where: PhoneWhereInput, orderBy: PhoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhoneConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  purchase(where: PurchaseWhereUniqueInput!): Purchase
  purchases(where: PurchaseWhereInput, orderBy: PurchaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Purchase]!
  purchasesConnection(where: PurchaseWhereInput, orderBy: PurchaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PurchaseConnection!
  shipping(where: ShippingWhereUniqueInput!): Shipping
  shippings(where: ShippingWhereInput, orderBy: ShippingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shipping]!
  shippingsConnection(where: ShippingWhereInput, orderBy: ShippingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShippingConnection!
  node(id: ID!): Node
}

type Shipping {
  id: ID!
  street: String!
  city: String!
  state: String!
  zipcode: Int!
  order_id: Order!
}

type ShippingConnection {
  pageInfo: PageInfo!
  edges: [ShippingEdge]!
  aggregate: AggregateShipping!
}

input ShippingCreateInput {
  id: ID
  street: String!
  city: String!
  state: String!
  zipcode: Int!
  order_id: OrderCreateOneWithoutShipping_addressInput!
}

input ShippingCreateManyWithoutOrder_idInput {
  create: [ShippingCreateWithoutOrder_idInput!]
  connect: [ShippingWhereUniqueInput!]
}

input ShippingCreateWithoutOrder_idInput {
  id: ID
  street: String!
  city: String!
  state: String!
  zipcode: Int!
}

type ShippingEdge {
  node: Shipping!
  cursor: String!
}

enum ShippingOrderByInput {
  id_ASC
  id_DESC
  street_ASC
  street_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zipcode_ASC
  zipcode_DESC
}

type ShippingPreviousValues {
  id: ID!
  street: String!
  city: String!
  state: String!
  zipcode: Int!
}

input ShippingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zipcode: Int
  zipcode_not: Int
  zipcode_in: [Int!]
  zipcode_not_in: [Int!]
  zipcode_lt: Int
  zipcode_lte: Int
  zipcode_gt: Int
  zipcode_gte: Int
  AND: [ShippingScalarWhereInput!]
  OR: [ShippingScalarWhereInput!]
  NOT: [ShippingScalarWhereInput!]
}

type ShippingSubscriptionPayload {
  mutation: MutationType!
  node: Shipping
  updatedFields: [String!]
  previousValues: ShippingPreviousValues
}

input ShippingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShippingWhereInput
  AND: [ShippingSubscriptionWhereInput!]
  OR: [ShippingSubscriptionWhereInput!]
  NOT: [ShippingSubscriptionWhereInput!]
}

input ShippingUpdateInput {
  street: String
  city: String
  state: String
  zipcode: Int
  order_id: OrderUpdateOneRequiredWithoutShipping_addressInput
}

input ShippingUpdateManyDataInput {
  street: String
  city: String
  state: String
  zipcode: Int
}

input ShippingUpdateManyMutationInput {
  street: String
  city: String
  state: String
  zipcode: Int
}

input ShippingUpdateManyWithoutOrder_idInput {
  create: [ShippingCreateWithoutOrder_idInput!]
  delete: [ShippingWhereUniqueInput!]
  connect: [ShippingWhereUniqueInput!]
  set: [ShippingWhereUniqueInput!]
  disconnect: [ShippingWhereUniqueInput!]
  update: [ShippingUpdateWithWhereUniqueWithoutOrder_idInput!]
  upsert: [ShippingUpsertWithWhereUniqueWithoutOrder_idInput!]
  deleteMany: [ShippingScalarWhereInput!]
  updateMany: [ShippingUpdateManyWithWhereNestedInput!]
}

input ShippingUpdateManyWithWhereNestedInput {
  where: ShippingScalarWhereInput!
  data: ShippingUpdateManyDataInput!
}

input ShippingUpdateWithoutOrder_idDataInput {
  street: String
  city: String
  state: String
  zipcode: Int
}

input ShippingUpdateWithWhereUniqueWithoutOrder_idInput {
  where: ShippingWhereUniqueInput!
  data: ShippingUpdateWithoutOrder_idDataInput!
}

input ShippingUpsertWithWhereUniqueWithoutOrder_idInput {
  where: ShippingWhereUniqueInput!
  update: ShippingUpdateWithoutOrder_idDataInput!
  create: ShippingCreateWithoutOrder_idInput!
}

input ShippingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zipcode: Int
  zipcode_not: Int
  zipcode_in: [Int!]
  zipcode_not_in: [Int!]
  zipcode_lt: Int
  zipcode_lte: Int
  zipcode_gt: Int
  zipcode_gte: Int
  order_id: OrderWhereInput
  AND: [ShippingWhereInput!]
  OR: [ShippingWhereInput!]
  NOT: [ShippingWhereInput!]
}

input ShippingWhereUniqueInput {
  id: ID
}

type Subscription {
  billing(where: BillingSubscriptionWhereInput): BillingSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  phone(where: PhoneSubscriptionWhereInput): PhoneSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  purchase(where: PurchaseSubscriptionWhereInput): PurchaseSubscriptionPayload
  shipping(where: ShippingSubscriptionWhereInput): ShippingSubscriptionPayload
}
`
      }
    